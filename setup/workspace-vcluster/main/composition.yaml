apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: workspace
spec:
  compositeTypeRef:
    apiVersion: epca.eo/v1beta1
    kind: XWorkspace
  mode: Pipeline
  pipeline:
  - step: prepare-environment
    functionRef:
      name: function-environment-configs
    input:
      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        environmentConfigs:
        - type: Reference
          ref:
            name: workspace
  - step: setup-environment
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      environment:
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.claimRef.name
          toFieldPath: name
  - step: setup-kubernetes
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: namespace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: <name>
                  labels:
                    workspace: "true"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.name"
      - name: resourcequota
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ResourceQuota
                metadata:
                  name: workspace
                  namespace: <name>
                spec:
                  hard: {}
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.subscription"
          toFieldPath: "spec.forProvider.manifest.spec.hard"
          transforms:
          - type: map
            map: 
              bronze:
                pods: "5"
                # limits.cpu: 1500m
                # limits.memory: 6Gi
                # requests.cpu: "1"
                # requests.memory: 4Gi
              silver:
                pods: "10"
                # limits.cpu: "3"
                # limits.memory: 12Gi
                # requests.cpu: "2"
                # requests.memory: 8Gi
              gold:
                pods: "20"
                # limits.cpu: "6"
                # limits.memory: 20Gi
                # requests.cpu: "4"
                # requests.memory: 16Gi
      - name: helm-vcluster
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata: {}
          spec:
            forProvider:
              chart:
                name: vcluster
                repository: https://charts.loft.sh
                version: 0.23.2
              namespace: <replaced>
              values:
                controlPlane:
                  distro:
                    k0s:
                      enabled: true
                  statefulSet:
                    persistence:
                      volumeClaim:
                        storageClass: <storageClassName>
                    highAvailability:
                      replicas: <replaced>
                  ingress:
                    enabled: false
                  proxy:
                    extraSANs:
                      - <vcluster.prefix><name><vcluster.separator><domain>
                sync:
                  toHost:
                    serviceAccounts:
                      enabled: true
                    persistentVolumeClaims:
                      enabled: true
                    persistentVolumes:
                      enabled: true
                  fromHost:
                    nodes:
                      enabled: true
                      clearImageStatus: true
                    storageClasses:
                      enabled: true
                    secrets:
                      enabled: true
                      mappings:
                        byName:
                          "": "default/*"
                exportKubeConfig:
                  context: vcluster-context
                  server: https://<vcluster.prefix><name><vcluster.separator><domain>
                integrations:
                  metricsServer:
                    enabled: true
            providerConfigRef:
              name: provider-helm
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'vcluster-%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.namespace"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "storageClassName"
          toFieldPath: "spec.forProvider.values.controlPlane.statefulSet.persistence.volumeClaim.storageClass"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: vcluster.prefix
            - fromFieldPath: name
            - fromFieldPath: vcluster.separator
            - fromFieldPath: domain
            string:
              fmt: "%s%s%s%s"
          toFieldPath: "spec.forProvider.values.controlPlane.proxy.extraSANs[0]"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: vcluster.prefix
            - fromFieldPath: name
            - fromFieldPath: vcluster.separator
            - fromFieldPath: domain
            string:
              fmt: "https://%s%s%s%s"
          toFieldPath: "spec.forProvider.values.exportKubeConfig.server"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.vcluster"
          toFieldPath: "spec.forProvider.values.controlPlane.statefulSet.highAvailability"
          transforms:
          - type: map
            map: 
              active:
                replicas: 1
              suspended:
                replicas: 0
              disabled:
                replicas: 0
      - name: ingress-vcluster
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: vcluster
                  namespace: <name>
                  annotations:
                    nginx.ingress.kubernetes.io/ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
                    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                    kubernetes.io/tls-acme: 'true'
                spec:
                  rules:
                    - host: <vcluster.prefix><name><vcluster.separator><domain>
                      http:
                        paths:
                          - path: /
                            pathType: Prefix
                            backend:
                              service:
                                name: vcluster-<name>
                                port:
                                  number: 443
                  tls:
                    - hosts:
                        - <vcluster.prefix><name><vcluster.separator><domain>
                      secretName: vcluster-tls
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: vcluster.prefix
            - fromFieldPath: name
            - fromFieldPath: vcluster.separator
            - fromFieldPath: domain
            string:
              fmt: "%s%s%s%s"
          toFieldPath: "spec.forProvider.manifest.spec.rules[0].host"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'vcluster-%s'
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: vcluster.prefix
            - fromFieldPath: name
            - fromFieldPath: vcluster.separator
            - fromFieldPath: domain
            string:
              fmt: "%s%s%s%s"
          toFieldPath: "spec.forProvider.manifest.spec.tls[0].hosts[0]"
      - name: example-id
        base:
          apiVersion: tf.upbound.io/v1beta1
          kind: Workspace
          metadata: {}
          spec:
            providerConfigRef:
              name: provider-terraform
            forProvider:
              source: Inline
              module: |
                resource "random_id" "example_id" {
                  byte_length = 4
                }
                output "example_id" {
                  value       = random_id.example_id.hex
                  sensitive = false
                }
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
      - name: role-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: Role
                metadata:
                  name: workspace
                  namespace: <name>
                rules:
                  - apiGroups:
                    - ""
                    resources:
                    - "secrets"
                    verbs:
                    - "get"
                    - "list"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: rolebinding-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                kind: RoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: workspace
                  namespace: <name>
                subjects:
                  - kind: ServiceAccount
                    name: default
                    namespace: <name>
                roleRef:
                  kind: Role
                  name: workspace
                  apiGroup: rbac.authorization.k8s.io
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.subjects[0].namespace"
      - name: secretstore-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1beta1
                kind: SecretStore
                metadata:
                  name: workspace
                  namespace: <name>
                spec:
                  provider:
                    kubernetes:
                      remoteNamespace: <name>
                      server:
                        caProvider:
                          type: ConfigMap
                          name: kube-root-ca.crt
                          namespace: workspace
                          key: ca.crt
                      auth:
                        serviceAccount:
                          name: default
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.provider.kubernetes.remoteNamespace"
      - name: externalsecret-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: workspace
                  namespace: <name>
                spec:
                  refreshInterval: 10m
                  secretStoreRef:
                    name: workspace
                    kind: SecretStore
                  target:
                    name: workspace
                    creationPolicy: Owner
                    template:
                      data:
                        AWS_ACCESS_KEY_ID: "{{ .AWS_ACCESS_KEY_ID }}"
                        AWS_SECRET_ACCESS_KEY: "{{ .AWS_SECRET_ACCESS_KEY }}"
                        AWS_ENDPOINT_URL: <storage.endpoint>
                        AWS_REGION: <storage.region>
                        PROVIDER: <storage.provider>
                        KUBECONFIG: "{{ .KUBECONFIG }}"
                  data:
                  - secretKey: AWS_SECRET_ACCESS_KEY
                    remoteRef:
                      key: bucket-<name>
                      property: AWS_SECRET_ACCESS_KEY
                  - secretKey: AWS_ACCESS_KEY_ID
                    remoteRef:
                      key: bucket-<name>
                      property: AWS_ACCESS_KEY_ID
                  - secretKey: KUBECONFIG
                    remoteRef:
                      key: vc-vcluster-<name>
                      property: config
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "storage.endpoint"
          toFieldPath: "spec.forProvider.manifest.spec.target.template.data['AWS_ENDPOINT_URL']"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "storage.region"
          toFieldPath: "spec.forProvider.manifest.spec.target.template.data['AWS_REGION']"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "storage.provider"
          toFieldPath: "spec.forProvider.manifest.spec.target.template.data['PROVIDER']"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.data[0].remoteRef.key"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'bucket-%s'
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.data[1].remoteRef.key"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'bucket-%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.data[2].remoteRef.key"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'vc-vcluster-%s'
      - name: externalsecret-rclone
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: rclone
                  namespace: <name>
                spec:
                  refreshInterval: 10m
                  secretStoreRef:
                    name: workspace
                    kind: SecretStore
                  target:
                    name: rclone
                    creationPolicy: Owner
                    template:
                      data:
                        remote: "{{ .AWS_ACCESS_KEY_ID }}"
                        remotePath: "/"
                        configData: |
                          [{{ .AWS_ACCESS_KEY_ID }}]
                          type = s3
                          provider = {{ .PROVIDER }}
                          endpoint = {{ .AWS_ENDPOINT_URL }}
                          region = {{ .AWS_REGION }}
                          access_key_id = {{ .AWS_ACCESS_KEY_ID }}
                          secret_access_key = {{ .AWS_SECRET_ACCESS_KEY }}
                  data:
                  - secretKey: PROVIDER
                    remoteRef:
                      key: workspace
                      property: PROVIDER
                  - secretKey: AWS_ENDPOINT_URL
                    remoteRef:
                      key: workspace
                      property: AWS_ENDPOINT_URL
                  - secretKey: AWS_REGION
                    remoteRef:
                      key: workspace
                      property: AWS_REGION
                  - secretKey: AWS_ACCESS_KEY_ID
                    remoteRef:
                      key: workspace
                      property: AWS_ACCESS_KEY_ID
                  - secretKey: AWS_SECRET_ACCESS_KEY
                    remoteRef:
                      key: workspace
                      property: AWS_SECRET_ACCESS_KEY
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: pvc-rclone
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: rclone # same name as secret
                  namespace: <name>
                spec:
                  accessModes:
                  - ReadOnlyMany
                  resources:
                    requests:
                      storage: 1Mi
                  storageClassName: csi-rclone
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: deployment-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: workspace
                  namespace: <name>
                labels:
                  app.kubernetes.io/instance: workspace
                  app.kubernetes.io/name: workspace
                spec:
                  strategy:
                    rollingUpdate:
                      maxUnavailable: 0
                    type: RollingUpdate
                  replicas: 1
                  revisionHistoryLimit: 2
                  selector:
                    matchLabels:
                      app.kubernetes.io/instance: workspace
                      app.kubernetes.io/name: workspace
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/instance: workspace
                        app.kubernetes.io/name: workspace
                    spec:
                      containers:
                      - name: workspace
                        image: ghcr.io/versioneer-tech/package-r:v2025.7.1-rc4
                        ports:
                        - name: http
                          containerPort: 8080
                          protocol: TCP
                        env:
                        - name: FB_AUTH_MAPPER
                          value: "<workspace.auth.mapper>"
                        - name: WORKSPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: FB_ROOT
                          value: "/workspace"
                        - name: FB_BRANDING_NAME
                          value: "Workspace-UI"
                        - name: FB_AUTH_HEADER
                          value: "Accept" # any existing header works here as protected via OPA
                        - name: AWS_ACCESS_KEY_ID
                          valueFrom:
                            secretKeyRef:
                              name: workspace
                              key: AWS_ACCESS_KEY_ID
                        - name: AWS_SECRET_ACCESS_KEY
                          valueFrom:
                            secretKeyRef:
                              name: workspace
                              key: AWS_SECRET_ACCESS_KEY
                        - name: AWS_REGION
                          valueFrom:
                            secretKeyRef:
                              name: workspace
                              key: AWS_REGION
                        - name: AWS_ENDPOINT_URL
                          valueFrom:
                            secretKeyRef:
                              name: workspace
                              key: AWS_ENDPOINT_URL
                        - name: FB_CATALOG_BASE_URL
                          value: "/workspace"
                        - name: FB_CATALOG_PREVIEW_URL
                          value: "https://eoapi.apx.develop.eoepca.org/browser/external/"
                        resources:
                          limits:
                            cpu: 1
                            memory: 512Mi
                          requests:
                            cpu: 0.1
                            memory: 128Mi
                        imagePullPolicy: Always
                        volumeMounts:
                        - name: workspace
                          mountPath: /workspace
                      volumes:
                      - name: workspace
                        persistentVolumeClaim:
                          claimName: <workspace.pvcs[0]>
                      # nodeSelector:
                      #  "kubernetes.io/hostname": "192.168.9.31"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "workspace.auth.mapper"
          toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].env[0].value"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "workspace.pvcs[0]"
          toFieldPath: "spec.forProvider.manifest.spec.template.spec.volumes[0].persistentVolumeClaim.claimName"
      - name: service-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Service
                metadata:
                  name: workspace
                  namespace: <name>
                spec:
                  type: ClusterIP
                  selector:
                    app.kubernetes.io/instance: workspace
                    app.kubernetes.io/name: workspace
                  ports:
                    - name: http
                      protocol: TCP
                      port: 8080
                      targetPort: http
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: apisixroute-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apisix.apache.org/v2
                kind: ApisixRoute
                metadata:
                  name: workspace
                  namespace: <name>
                spec:
                  http:
                  - backends:
                    - serviceName: workspace
                      servicePort: 8080
                    match:
                      hosts:
                      - <name><separator><domain>
                      paths:
                      - /static*
                      - /share/public-*
                      - /api/public/dl/public-*
                      - /api/public/share/public-*
                      - /api/public/catalog*
                    name: public
                    plugins:
                    - name: cors
                      enable: true
                  - backends:
                    - serviceName: workspace
                      servicePort: 8080
                    match:
                      hosts:
                      - <name><separator><domain>
                      paths:
                      - /*
                    name: protected
                    websocket: true
                    plugins:
                    - name: openid-connect
                      enable: true
                      config:
                        discovery: <iam.discovery>
                        use_jwks: true
                        bearer_only: false # as we want to redirect to login screen (default: false)
                        set_access_token_header: true # required for subsequent OPA check (default: true)
                        access_token_in_authorization_header: true # required for subsequent OPA check (default: false)
                        set_id_token_header: true # required by UI (default: true)
                        set_userinfo_header: true # required by UI (default: true)
                        client_id: <name>
                        client_secret: ""
                    - name: opa
                      enable: true
                      config:
                        host: <opa.host>
                        policy: <opa.policy>
                    - name: cors
                      enable: true
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: name
            - fromFieldPath: separator
            - fromFieldPath: domain
            string:
              fmt: "%s%s%s"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].match.hosts[0]"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: name
            - fromFieldPath: separator
            - fromFieldPath: domain
            string:
              fmt: "%s%s%s"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].match.hosts[0]"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].plugins[0].config.client_id"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "iam.discovery"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].plugins[0].config.discovery"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "opa.host"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].plugins[1].config.host"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "opa.policy"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].plugins[1].config.policy"
      - name: apisixroute-code-server
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apisix.apache.org/v2
                kind: ApisixRoute
                metadata:
                  name: code-server
                  namespace: <name>
                spec:
                  http:
                  - name: code-server-route
                    backends:
                    - serviceName: code-server-x-default-x-vcluster-<name>
                      servicePort: 8080
                    match:
                      hosts:
                      - code-server-<name><separator><domain>
                      paths:
                      - /
                      - /*
                    websocket: true
                    # plugins:
                    # - name: openid-connect
                    #   enable: true
                    #   config:
                    #     discovery: <iam.discovery>
                    #     use_jwks: true
                    #     bearer_only: false # as we want to redirect to login screen (default: false)
                    #     set_access_token_header: false
                    #     access_token_in_authorization_header: false
                    #     set_id_token_header: false
                    #     set_userinfo_header: false
                    #     client_id: <name>
                    #     client_secret: ""
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"        
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: name
            - fromFieldPath: separator
            - fromFieldPath: domain
            string:
              fmt: "code-server-%s%s%s"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].match.hosts[0]"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].plugins[0].config.client_id"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].backends[0].serviceName"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'code-server-x-default-x-vcluster-%s'
        - type: FromEnvironmentFieldPath
          fromFieldPath: "iam.discovery"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].plugins[0].config.discovery"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "opa.host"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].plugins[1].config.host"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "opa.policy"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].plugins[1].config.policy"
      - name: keycloak-group
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Group
          metadata:
            name: <name>
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: <name>
              realmId: eoepca
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "metadata.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.name"
      - name: keycloak-mapper
        base:
          apiVersion: openidgroup.keycloak.crossplane.io/v1alpha1
          kind: GroupMembershipProtocolMapper
          metadata:
            name: <name>
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              claimName: groups
              clientIdSelector:
                matchLabels:
                  crossplane.io/claim-name: <name>
              addToAccessToken: false
              addToIdToken: true
              addToUserinfo: false
              fullPath: false
              name: group-membership-mapper
              realmId: eoepca
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "metadata.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.clientIdSelector.matchLabels['crossplane.io/claim-name']"
      - name: keycloak-client
        base:
          apiVersion: openidclient.keycloak.crossplane.io/v1alpha1
          kind: Client
          metadata:
            name: <name>
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: <name>
              clientId: <name>
              rootUrl: https://<name><separator><domain>
              adminUrl: https://<name><separator><domain>
              accessType: PUBLIC
              standardFlowEnabled: true
              implicitFlowEnabled: true
              directAccessGrantsEnabled: false
              serviceAccountsEnabled: false
              oauth2DeviceAuthorizationGrantEnabled: true
              webOrigins: 
                - '/*'
              validRedirectUris:
                - '/*'
              realmId: eoepca
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "metadata.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.clientId"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: name
            - fromFieldPath: separator
            - fromFieldPath: domain
            string:
              fmt: "https://%s%s%s"
          toFieldPath: "spec.forProvider.rootUrl"
        - type: CombineFromEnvironment
          combine:
            strategy: string
            variables:
            - fromFieldPath: name
            - fromFieldPath: separator
            - fromFieldPath: domain
            string:
              fmt: "https://%s%s%s"
          toFieldPath: "spec.forProvider.adminUrl"
      - name: keycloak-role
        base:
          apiVersion: role.keycloak.crossplane.io/v1alpha1
          kind: Role
          metadata:
            name: <name>
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: ws_access
              clientIdRef:
                name: <name>
                policy:
                  resolution: Required
              realmId: eoepca
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "metadata.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.clientIdRef.name"
        - type: ToEnvironmentFieldPath
          fromFieldPath: status.atProvider.id
          toFieldPath: roleId
      - name: keycloak-roles
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Roles
          metadata:
            name: <name>
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              realmId: "eoepca"
              groupIdRef:
                name: <name>
                policy:
                  resolution: "Required"
              roleIdsRefs:
                - name: <name>
                  policy:
                    resolution: "Required"
        patches:
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "metadata.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.groupIdRef.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "name"
          toFieldPath: "spec.forProvider.roleIdsRefs[0].name"
  - step: setup-keycloak-members
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          ---
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Memberships
          metadata:
            name: {{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              groupIdRef:
                name: {{ .observed.composite.resource.spec.claimRef.name }}
                policy:
                  resolution: Required
              realmId: eoepca
              members:
                - {{ .observed.composite.resource.spec.owner }}
                {{- range .observed.composite.resource.spec.members }}
                - {{ . }}
                {{- end }}
  - step: setup-storage
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: workspace-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: storage-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
          spec:
            providerConfigRef:
              name: provider-kubernetes
            forProvider:
              manifest:
                apiVersion: epca.eo/v1beta1
                kind: Storage
                metadata:
                  name: workspace
                  namespace: {{ .observed.composite.resource.spec.claimRef.name }}
                spec:
                  buckets:
                    - name: {{ .observed.composite.resource.spec.claimRef.name }}
                      owner: {{ .observed.composite.resource.spec.claimRef.name }}
                      {{- $grants := .observed.composite.resource.spec.grants }}
                      {{- range $g := $grants }}
                      {{- if eq $g.bucket $.observed.composite.resource.spec.claimRef.name }}
                      accessReadWrite:
                        {{- range $grantee := $g.grantees }}
                        - {{ $grantee }}
                        {{- end }}
                      {{- end }}
                      {{- end }}
                    {{- range .observed.composite.resource.spec.extraBuckets }}
                    {{- $bucket := . }}
                    - name: {{ $bucket }}
                      owner: {{ $.observed.composite.resource.spec.claimRef.name }}
                      {{- $accessors := list }}
                      {{- range $.observed.composite.resource.spec.grants }}
                      {{- if eq .bucket $bucket }}
                      {{- range .grantees }}
                      {{- $accessors = append $accessors . }}
                      {{- end }}
                      {{- end }}
                      {{- end }}
                      {{- if $accessors }}
                      accessReadWrite:
                        {{- range $grantee := $accessors }}
                        - {{ $grantee }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- range .observed.composite.resource.spec.linkedBuckets }}
                    - name: {{ . }}
                      accessReadWrite:
                        - {{ $.observed.composite.resource.spec.claimRef.name }}
                    {{- end }}
  - step: setup-datatooling
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: providerconfig-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: providerconfig-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
          spec:
            providerConfigRef:
              name: provider-kubernetes
            forProvider:
              manifest:
                apiVersion: kubernetes.crossplane.io/v1alpha1
                kind: ProviderConfig
                metadata:
                  name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
                spec:
                  credentials:
                    source: Secret
                    secretRef:
                      namespace: {{ .observed.composite.resource.spec.claimRef.name }}
                      name: vc-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
                      key: config
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: code-server-deployment-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: code-server-deployment-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
          spec:
            providerConfigRef:
              name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            forProvider:
              manifest:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: code-server
                  namespace: default
                  labels:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app.kubernetes.io/instance: code-server
                      app.kubernetes.io/name: code-server
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/instance: code-server
                        app.kubernetes.io/name: code-server
                    spec:
                      initContainers:
                        - name: init-file-on-volume
                          image: eoepca/pde-code-server:1.0.0
                          command: ["bash", "/opt/init/.init.sh"]
                          volumeMounts:
                            - name: workspace-volume
                              mountPath: /workspace
                            - name: init
                              mountPath: /opt/init/.init.sh
                              subPath: init
                      containers:
                        - name: code-server
                          image: eoepca/pde-code-server:1.0.0
                          securityContext:
                            privileged: true
                          command: ["/bin/bash", "-c"]
                          args:
                            - code-server --auth none --bind-addr 0.0.0.0:8080 --user-data-dir /workspace /workspace
                          ports:
                            - containerPort: 8080
                              name: web
                          volumeMounts:
                            - name: workspace-volume
                              mountPath: /workspace
                            - name: bash-login
                              mountPath: /workspace/.bash_login
                              subPath: bash-login
                            - name: bash-rc
                              mountPath: /workspace/.bashrc
                              subPath: bash-rc
                          env:
                            - name: XDG_CONFIG_HOME
                              value: /workspace/.local
                            - name: XDG_DATA_HOME
                              value: /workspace/.local/share/
                            - name: XDG_RUNTIME_DIR
                              value: /workspace/.local
                            - name: AWS_ENDPOINT_URL
                              valueFrom:
                                secretKeyRef:
                                  name: workspace
                                  key: AWS_ENDPOINT_URL
                            - name: AWS_REGION
                              valueFrom:
                                secretKeyRef:
                                  name: workspace
                                  key: AWS_REGION
                            - name: AWS_ACCESS_KEY_ID
                              valueFrom:
                                secretKeyRef:
                                  name: workspace
                                  key: AWS_ACCESS_KEY_ID
                            - name: AWS_SECRET_ACCESS_KEY
                              valueFrom:
                                secretKeyRef:
                                  name: workspace
                                  key: AWS_SECRET_ACCESS_KEY
                      volumes:
                        - name: workspace-volume
                          persistentVolumeClaim:
                            claimName: code-server-pvc
                        - name: init
                          configMap:
                            name: init
                            defaultMode: 420
                        - name: bash-login
                          configMap:
                            name: bash-login
                            defaultMode: 420
                        - name: bash-rc
                          configMap:
                            name: bash-rc
                            defaultMode: 420
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: code-server-pvc-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: code-server-pvc-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
            labels:
              app.kubernetes.io/instance: code-server
              app.kubernetes.io/name: code-server
          spec:
            providerConfigRef:
              name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            forProvider:
              manifest:
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: code-server-pvc
                  namespace: default
                  labels:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 20Gi
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: code-server-service-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: code-server-service-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
            labels:
              app.kubernetes.io/instance: code-server
              app.kubernetes.io/name: code-server
          spec:
            providerConfigRef:
              name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            forProvider:
              manifest:
                apiVersion: v1
                kind: Service
                metadata:
                  name: code-server
                  namespace: default
                  labels:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                spec:
                  selector:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                  ports:
                    - name: web
                      port: 8080
                      targetPort: 8080
                  type: ClusterIP
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: code-server-init-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: code-server-init-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
            labels:
              app.kubernetes.io/instance: code-server
              app.kubernetes.io/name: code-server
          spec:
            providerConfigRef:
              name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: init
                  namespace: default
                  labels:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                data:
                  init: |
                    #!/bin/bash
                    set -x
                    cd /workspace
                    code-server --install-extension ms-python.python
                    code-server --install-extension redhat.vscode-yaml
                    ln -s /workspace/.local/share/code-server/extensions /workspace/extensions
                    mkdir -p /workspace/User/
                    echo '{"workbench.colorTheme": "Visual Studio Dark"}' > /workspace/User/settings.json
                    python -m venv .venv && source .venv/bin/activate
                    python -m pip install --no-cache-dir ipykernel
                    python -m ipykernel install --user --name default --display-name "Python Default"
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: code-server-bash-rc-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: code-server-bash-rc-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
            labels:
              app.kubernetes.io/instance: code-server
              app.kubernetes.io/name: code-server
          spec:
            providerConfigRef:
              name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: bash-rc
                  namespace: default
                  labels:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                data:
                  bash-rc: |
                    source /workspace/.venv/bin/activate
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: code-server-bash-login-{{ .observed.composite.resource.spec.claimRef.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: code-server-bash-login-{{ .observed.composite.resource.spec.claimRef.name }}
              gotemplating.fn.crossplane.io/ready: "True"
            labels:
              app.kubernetes.io/instance: code-server
              app.kubernetes.io/name: code-server
          spec:
            providerConfigRef:
              name: provider-vcluster-{{ .observed.composite.resource.spec.claimRef.name }}
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: bash-login
                  namespace: default
                  labels:
                    app.kubernetes.io/instance: code-server
                    app.kubernetes.io/name: code-server
                data:
                  bash-login: |
                    source /workspace/.bashrc
