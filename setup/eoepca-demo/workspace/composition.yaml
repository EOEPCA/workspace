apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: workspace
spec:
  compositeTypeRef:
    apiVersion: epca.eo/v1beta1
    kind: XWorkspace
  mode: Pipeline
  pipeline:
  - step: runtime
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: namespace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    workspace: "true"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.name"
      - name: resourcequota
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ResourceQuota
                metadata:
                  name: default
                spec:
                  hard: {}
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.subscription"
          toFieldPath: "spec.forProvider.manifest.spec.hard"
          transforms:
          - type: map
            map: 
              bronze:
                #limits.cpu: 1500m
                #limits.memory: 6Gi
                pods: "5"
                #requests.cpu: "1"
                #requests.memory: 4Gi
              silver:
                #limits.cpu: "3"
                #limits.memory: 12Gi
                pods: "10"
                #requests.cpu: "2"
                #requests.memory: 8Gi
              gold:
                #limits.cpu: "6"
                #limits.memory: 20Gi
                pods: "20"
                #requests.cpu: "4"
                #requests.memory: 16Gi
      - name: vcluster
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: helm.crossplane.io/v1beta1
                kind: Release
                metadata:
                  name: vcluster
                spec:
                  forProvider:
                    chart:
                      name: vcluster
                      repository: https://charts.loft.sh
                      version: 0.22.0
                    namespace: <replaced>
                    values:
                      controlPlane:
                        distro:
                          k0s:
                            enabled: true
                        statefulSet:
                          persistence:
                            volumeClaim:
                              storageClass: managed-nfs-storage
                  providerConfigRef:
                    name: provider-helm
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.forProvider.namespace"
      - name: example-id
        base:
          apiVersion: tf.upbound.io/v1beta1
          kind: Workspace
          metadata: {}
          spec:
            providerConfigRef:
              name: provider-terraform
            forProvider:
              source: Inline
              module: |
                resource "random_id" "example_id" {
                  byte_length = 4
                }
                output "example_id" {
                  value       = random_id.example_id.hex
                  sensitive = false
                }
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
  - step: storage
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: storage
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: epca.eo/v1beta1
                kind: Storage
                metadata: 
                  name: default            
                spec:
                  location: EU
                  acl: private
                  writeConnectionSecretToRef:
                    name: bucket
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      # - name: pvc-rclone
      #   base:
      #     apiVersion: kubernetes.crossplane.io/v1alpha2
      #     kind: Object
      #     metadata: {}
      #     spec:
      #       forProvider:
      #         manifest:
      #           apiVersion: v1
      #           kind: PersistentVolumeClaim
      #           metadata:
      #             name: rclone # same name as secret
      #           spec:
      #             accessModes:
      #             - ReadOnlyMany
      #             resources:
      #               requests:
      #                 storage: 1Mi
      #             storageClassName: csi-rclone
      #       providerConfigRef:
      #         name: provider-kubernetes
      #   patches:
      #   - type: FromCompositeFieldPath
      #     fromFieldPath: "spec.claimRef.name"
      #     toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      # - name: externalsecret-rclone
      #   base:
      #     apiVersion: kubernetes.crossplane.io/v1alpha2
      #     kind: Object
      #     metadata: {}
      #     spec:
      #       forProvider:
      #         manifest:
      #           apiVersion: external-secrets.io/v1beta1
      #           kind: ExternalSecret
      #           metadata:
      #             name: rclone
      #           spec:
      #             refreshInterval: 1h
      #             secretStoreRef:
      #               name: in-cluster-kubernetes
      #               kind: ClusterSecretStore
      #             target:
      #               name: rclone
      #               creationPolicy: Owner
      #               template:
      #                 data:
      #                   remote: "{{ .AWS_ACCESS_KEY_ID }}"
      #                   remotePath: "/"
      #                   configData: |
      #                     [{{ .AWS_ACCESS_KEY_ID }}]
      #                     type = s3
      #                     provider = Minio
      #                     endpoint = https://minio.develop.eoepca.org
      #                     access_key_id = {{ .AWS_ACCESS_KEY_ID }}
      #                     secret_access_key = {{ .AWS_SECRET_ACCESS_KEY }}
      #             data:
      #             - secretKey: AWS_SECRET_ACCESS_KEY
      #               remoteRef:
      #                 key: <replaced>
      #                 property: AWS_SECRET_ACCESS_KEY
      #             - secretKey: AWS_ACCESS_KEY_ID
      #               remoteRef:
      #                 key: <replaced>
      #                 property: AWS_ACCESS_KEY_ID
      #       providerConfigRef:
      #         name: provider-kubernetes
      #   patches:
      #   - type: FromCompositeFieldPath
      #     fromFieldPath: "spec.claimRef.namespace"
      #     toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      #   - type: FromCompositeFieldPath
      #     fromFieldPath: "spec.claimRef.namespace"
      #     toFieldPath: "spec.forProvider.manifest.spec.data[0].remoteRef.key"
      #   - type: FromCompositeFieldPath
      #     fromFieldPath: "spec.claimRef.namespace"
      #     toFieldPath: "spec.forProvider.manifest.spec.data[1].remoteRef.key"
      - name: deployment-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: workspace-ui
                labels:
                  app.kubernetes.io/instance: workspace-ui
                  app.kubernetes.io/name: workspace-ui
                spec:
                  strategy:
                    rollingUpdate:
                      maxUnavailable: 0
                    type: RollingUpdate
                  replicas: 1
                  revisionHistoryLimit: 2
                  selector:
                    matchLabels:
                      app.kubernetes.io/instance: workspace-ui
                      app.kubernetes.io/name: workspace-ui
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/instance: workspace-ui
                        app.kubernetes.io/name: workspace-ui
                    spec:
                      containers:
                      - name: workspace-ui
                        image: ghcr.io/versioneer-tech/package-r:v2024.12.3
                        ports:
                        - name: http
                          containerPort: 8080
                          protocol: TCP
                        env:
                        - name: FB_BRANDING_NAME
                          value: "Workspace-UI"
                        - name: FB_PASSWORD
                          value: "changeme"
                        resources:
                          limits:
                            cpu: 1
                            memory: 512Mi
                          requests:
                            cpu: 0.1
                            memory: 128Mi
                        imagePullPolicy: Always
                        volumeMounts:
                        - mountPath: /mounts
                          name: mounts
                        - mountPath: <replaced>
                          name: secrets
                        - mountPath: <replaced>
                          name: secrets
                      volumes:
                      - name: mounts
                        persistentVolumeClaim:
                          claimName: rclone
                          readOnly: true
                      - name: secrets
                        secret:
                          secretName: bucket
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].volumeMounts[1].mountPath"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '/secrets/%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].volumeMounts[2].mountPath"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '/secrets/%s-stage'
      - name: service-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Service
                metadata:
                  name: workspace-ui
                spec:
                  type: ClusterIP
                  selector:
                    app.kubernetes.io/instance: workspace-ui
                    app.kubernetes.io/name: workspace-ui
                  ports:
                    - name: http
                      protocol: TCP
                      port: 8080
                      targetPort: http
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: ingress-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apisix.apache.org/v2
                kind: ApisixRoute
                metadata:
                  name: workspace-ui
                spec:
                  http:
                  - backends:
                    - serviceName: workspace-ui
                      servicePort: 8080
                    match:
                      hosts:
                      - <replaced>
                      paths:
                      - /share/*
                    name: public
                  - backends:
                    - serviceName: workspace-ui
                      servicePort: 8080
                    match:
                      hosts:
                      - <replaced>
                      paths:
                      - /*
                    name: protected
                    # plugins:
                    # - config:
                    #     access_token_in_authorization_header: true
                    #     client_id: ws-test4
                    #     client_secret: Qmp5p...
                    #     discovery: https://iam-auth.apx.develop.eoepca.org/realms/eoepca/.well-known/openid-configuration
                    #   enable: true
                    #   name: openid-connect
                    # - config:
                    #     client_id: ws-test4
                    #     client_secret: Qmp5p...
                    #     discovery: https://iam-auth.apx.develop.eoepca.org/realms/eoepca/.well-known/uma2-configuration
                    #     lazy_load_paths: true
                    #     ssl_verify: false
                    #   enable: true
                    #   name: authz-keycloak
                    websocket: true
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].match.hosts[0]"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s.apx.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].match.hosts[0]"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s.apx.develop.eoepca.org'
      - name: keycloak-group
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Group
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: <replaced>
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.name"
      - name: keycloak-membership
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Memberships
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              groupIdRef:
                name: <replaced>
                policy:
                  resolution: Required
              members:
              - <replaced>
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.groupIdRef.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.owner"
          toFieldPath: "spec.forProvider.members[0]"
      - name: keycloak-client
        base:
          apiVersion: openidclient.keycloak.crossplane.io/v1alpha1
          kind: Client
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              accessType: CONFIDENTIAL
              standardFlowEnabled: true
              directAccessGrantsEnabled: true
              serviceAccountsEnabled: true
              authorization:
                - policyEnforcementMode: ENFORCING
              webOrigins: 
                - '/*'
              validRedirectUris:
                - '/*'
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.clientId"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.rootUrl"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'https://%s.apx.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.adminUrl"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'https://%s.apx.develop.eoepca.org'
      - name: keycloak-role
        base:
          apiVersion: role.keycloak.crossplane.io/v1alpha1
          kind: Role
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: ws-access
              clientIdRef:
                policy:
                  resolution: Required
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.clientIdRef.name"
        - type: ToEnvironmentFieldPath
          fromFieldPath: status.atProvider.id
          toFieldPath: roleId
      - name: keycloak-roles
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Roles
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              realmId: "eoepca"
              groupIdRef:
                policy:
                  resolution: "Required"
              roleIdsRefs:
                - name: <replaced>
                  policy:
                    resolution: "Required"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.groupIdRef.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.roleIdsRefs[0].name"
      - name: keycloak-clientrolepolicy
        base:
          apiVersion: openidclient.keycloak.crossplane.io/v1alpha1
          kind: ClientRolePolicy
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: 'Role ws_access Policy'
              type: role
              decisionStrategy: UNANIMOUS
              logic: POSITIVE    
              realmId: eoepca
              role:
              - id: <replaced>
                required: false
              resourceServerIdRef:
                name: <replaced>
                policy:
                  resolution: Required
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromEnvironmentFieldPath
          fromFieldPath: "roleId"
          toFieldPath: "spec.forProvider.role[0].id"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.resourceServerIdRef.name"        