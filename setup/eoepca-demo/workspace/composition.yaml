apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: workspace
spec:
  compositeTypeRef:
    apiVersion: epca.eo/v1beta1
    kind: XWorkspace
  mode: Pipeline
  pipeline:
  - step: runtime
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: namespace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Namespace
                metadata:
                  labels:
                    workspace: "true"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.name"
      - name: resourcequota
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ResourceQuota
                metadata:
                  name: default
                spec:
                  hard: {}
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.subscription"
          toFieldPath: "spec.forProvider.manifest.spec.hard"
          transforms:
          - type: map
            map: 
              bronze:
                pods: "5"
                #limits.cpu: 1500m
                #limits.memory: 6Gi                
                #requests.cpu: "1"
                #requests.memory: 4Gi
              silver:
                pods: "10"
                #limits.cpu: "3"
                #limits.memory: 12Gi                
                #requests.cpu: "2"
                #requests.memory: 8Gi
              gold:
                pods: "20"
                #limits.cpu: "6"
                #limits.memory: 20Gi                
                #requests.cpu: "4"
                #requests.memory: 16Gi
      - name: helm-vcluster
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata: {}
          spec:
            forProvider:
              chart:
                name: vcluster
                repository: https://charts.loft.sh
                version: 0.23.0
              namespace: <replaced>
              values:
                controlPlane:
                  distro:
                    k0s:
                      enabled: true
                  statefulSet:
                    persistence:
                      volumeClaim:
                        storageClass: managed-nfs-storage
                  ingress:
                    enabled: false
                    # host: <replaced>
                sync:
                  toHost:
                    serviceAccounts:
                      enabled: true
                  fromHost:
                    nodes:
                      enabled: true
                      clearImageStatus: true
                exportKubeConfig:
                  context: vcluster-context
                  server: <replaced>
                  secret:
                    name: kubeconfig
                integrations:
                  metricsServer:
                    enabled: true
            providerConfigRef:
              name: provider-helm
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'k8s-%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.namespace"
        # - type: FromCompositeFieldPath
        #   fromFieldPath: "spec.claimRef.name"
        #   toFieldPath: "spec.forProvider.values.controlPlane.ingress.host"
        #   transforms:
        #   - type: string
        #     string:
        #       type: Format
        #       fmt: 'k8s-%s.apx.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.values.exportKubeConfig.server"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'https://k8s-%s.develop.eoepca.org'
      - name: ingress-vcluster
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: k8s
                  annotations:
                    nginx.ingress.kubernetes.io/ssl-redirect: "true"
                    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
                    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                    kubernetes.io/tls-acme: 'true'
                spec:
                  rules:
                    - host: <replaced>
                      http:
                        paths:
                          - path: /
                            pathType: Prefix
                            backend:
                              service:
                                name: <replaced>
                                port:
                                  number: 443
                  tls:
                    - hosts:
                        - <replaced>
                      secretName: vcluster-tls
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.rules[0].host"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'k8s-%s.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'k8s-%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.tls[0].hosts[0]"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'k8s-%s.develop.eoepca.org'
      - name: example-id
        base:
          apiVersion: tf.upbound.io/v1beta1
          kind: Workspace
          metadata: {}
          spec:
            providerConfigRef:
              name: provider-terraform
            forProvider:
              source: Inline
              module: |
                resource "random_id" "example_id" {
                  byte_length = 4
                }
                output "example_id" {
                  value       = random_id.example_id.hex
                  sensitive = false
                }
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
  - step: storage
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: storage
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: epca.eo/v1beta1
                kind: Storage
                metadata: 
                  name: default            
                spec:
                  location: EU
                  acl: private
                  writeConnectionSecretToRef:
                    name: bucket
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: role-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: Role
                metadata:
                  name: workspace
                rules:
                  - apiGroups:
                    - ""
                    resources:
                    - "secrets"
                    verbs:
                    - "get"
                    - "list"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: rolebinding-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                kind: RoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: workspace
                subjects:
                  - kind: ServiceAccount
                    name: default
                    namespace: <replaced>
                roleRef:
                  kind: Role
                  name: workspace
                  apiGroup: rbac.authorization.k8s.io
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.subjects[0].namespace"
      - name: secretstore-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1beta1
                kind: SecretStore
                metadata:
                  name: workspace
                  namespace: <replaced>
                spec:
                  provider:
                    kubernetes:
                      remoteNamespace: <replaced>
                      server:
                        caProvider:
                          type: ConfigMap
                          name: kube-root-ca.crt
                          namespace: workspace
                          key: ca.crt
                      auth:
                        serviceAccount:
                          name: default
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.provider.kubernetes.remoteNamespace"
      - name: externalsecret-workspace
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: workspace
                spec:
                  refreshInterval: 10m
                  secretStoreRef:
                    name: workspace
                    kind: SecretStore
                  target:
                    name: workspace
                    creationPolicy: Owner
                    template:
                      data:
                        AWS_ACCESS_KEY_ID: "{{ .AWS_ACCESS_KEY_ID }}"
                        AWS_SECRET_ACCESS_KEY: "{{ .AWS_SECRET_ACCESS_KEY }}"
                        AWS_ENDPOINT_URL: "https://minio.develop.eoepca.org"
                        AWS_REGION: "eoepca-demo"
                        KUBECONFIG: "{{ .KUBECONFIG }}"
                  data:
                  - secretKey: AWS_SECRET_ACCESS_KEY
                    remoteRef:
                      key: bucket
                      property: AWS_SECRET_ACCESS_KEY
                  - secretKey: AWS_ACCESS_KEY_ID
                    remoteRef:
                      key: bucket
                      property: AWS_ACCESS_KEY_ID
                  - secretKey: KUBECONFIG
                    remoteRef:
                      key: kubeconfig
                      property: config
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.target.template.data['bucket']"
      - name: deployment-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: workspace-ui
                labels:
                  app.kubernetes.io/instance: workspace-ui
                  app.kubernetes.io/name: workspace-ui
                spec:
                  strategy:
                    rollingUpdate:
                      maxUnavailable: 0
                    type: RollingUpdate
                  replicas: 1
                  revisionHistoryLimit: 2
                  selector:
                    matchLabels:
                      app.kubernetes.io/instance: workspace-ui
                      app.kubernetes.io/name: workspace-ui
                  template:
                    metadata:
                      labels:
                        app.kubernetes.io/instance: workspace-ui
                        app.kubernetes.io/name: workspace-ui
                    spec:
                      containers:
                      - name: workspace-ui
                        image: ghcr.io/versioneer-tech/package-r:v2025.2.4
                        ports:
                        - name: http
                          containerPort: 8080
                          protocol: TCP
                        env:
                        - name: WORKSPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: FB_BRANDING_NAME
                          value: "Workspace-UI"
                        - name: FB_PASSWORD
                          value: "changeme"
                        resources:
                          limits:
                            cpu: 1
                            memory: 512Mi
                          requests:
                            cpu: 0.1
                            memory: 128Mi
                        imagePullPolicy: Always
                        volumeMounts:
                        - mountPath: /mounts
                          name: mounts
                        - mountPath: <replaced>
                          name: secrets
                        - mountPath: <replaced>
                          name: secrets
                      volumes:
                      - name: mounts
                        persistentVolumeClaim:
                          claimName: rclone
                          readOnly: true
                      - name: secrets
                        secret:
                          secretName: bucket
                      nodeSelector:
                        "kubernetes.io/hostname": "192.168.9.31"
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].volumeMounts[1].mountPath"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '/secrets/%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].volumeMounts[2].mountPath"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '/secrets/%s-stage'
      - name: clusterrolebinding-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata: {}
                subjects:
                  - kind: ServiceAccount
                    name: default
                    namespace: <replaced>
                roleRef:
                  kind: ClusterRole
                  name: ws-keycloak
                  apiGroup: rbac.authorization.k8s.io
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'ws-keycloak:%s'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.subjects[0].namespace"
      - name: service-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Service
                metadata:
                  name: workspace-ui
                spec:
                  type: ClusterIP
                  selector:
                    app.kubernetes.io/instance: workspace-ui
                    app.kubernetes.io/name: workspace-ui
                  ports:
                    - name: http
                      protocol: TCP
                      port: 8080
                      targetPort: http
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
      - name: ingress-workspace-ui
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: apisix.apache.org/v2
                kind: ApisixRoute
                metadata:
                  name: workspace-ui
                spec:
                  http:
                  - backends:
                    - serviceName: workspace-ui
                      servicePort: 8080
                    match:
                      hosts:
                      - <replaced>
                      paths:
                      - /share/*
                      - /api/public*
                    name: public
                  - backends:
                    - serviceName: workspace-ui
                      servicePort: 8080
                    match:
                      hosts:
                      - <replaced>
                      paths:
                      - /*
                    name: protected
                    websocket: true
                    plugins:
                    - name: openid-connect
                      enable: true
                      config:
                        discovery: "https://iam-auth.apx.develop.eoepca.org/realms/eoepca/.well-known/openid-configuration"
                        bearer_only: false # as we want to redirect to login screen (default: false)
                        set_access_token_header: true # required for subsequent OPA check (default: true)
                        access_token_in_authorization_header: true # required for subsequent OPA check (default: false)
                        set_id_token_header: true # required by UI (default: true)
                        set_userinfo_header: true # required by UI (default: true)
                        client_id: <replaced>
                        client_secret: ""
                    - name: opa
                      enable: true
                      config:
                        host: http://iam-opal-opal-client:8181
                        policy: eoepca/workspace/wsui
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.http[0].match.hosts[0]"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s.apx.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].match.hosts[0]"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s.apx.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.manifest.spec.http[1].plugins[0].config.client_id"
      - name: keycloak-group
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Group
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: <replaced>
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.name"
      - name: keycloak-membership
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Memberships
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              groupIdRef:
                name: <replaced>
                policy:
                  resolution: Required
              members:
              - <replaced>
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.groupIdRef.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.owner"
          toFieldPath: "spec.forProvider.members[0]"
      - name: keycloak-client
        base:
          apiVersion: openidclient.keycloak.crossplane.io/v1alpha1
          kind: Client
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              accessType: PUBLIC
              standardFlowEnabled: true
              implicitFlowEnabled: true
              directAccessGrantsEnabled: false
              serviceAccountsEnabled: false
              oauth2DeviceAuthorizationGrantEnabled: true
              webOrigins: 
                - '/*'
              validRedirectUris:
                - '/*'
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.clientId"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.rootUrl"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'https://%s.apx.develop.eoepca.org'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.adminUrl"
          transforms:
          - type: string
            string:
              type: Format
              fmt: 'https://%s.apx.develop.eoepca.org'
      - name: keycloak-role
        base:
          apiVersion: role.keycloak.crossplane.io/v1alpha1
          kind: Role
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              name: ws_access
              clientIdRef:
                policy:
                  resolution: Required
              realmId: eoepca
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.clientIdRef.name"
        - type: ToEnvironmentFieldPath
          fromFieldPath: status.atProvider.id
          toFieldPath: roleId
      - name: keycloak-roles
        base:
          apiVersion: group.keycloak.crossplane.io/v1alpha1
          kind: Roles
          spec:
            providerConfigRef:
              name: provider-keycloak
            forProvider:
              realmId: "eoepca"
              groupIdRef:
                policy:
                  resolution: "Required"
              roleIdsRefs:
                - name: <replaced>
                  policy:
                    resolution: "Required"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.groupIdRef.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.roleIdsRefs[0].name"