apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: storage
spec:
  writeConnectionSecretsToNamespace: workspace
  compositeTypeRef:
    apiVersion: epca.eo/v1beta1
    kind: XStorage
  mode: Pipeline
  pipeline:
  - step: bucket
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: bucket
        base:
          apiVersion: minio.crossplane.io/v1
          kind: Bucket
          metadata: {}
          spec:
            forProvider:
              region: eu-central-1
            providerConfigRef:
              name: provider-minio
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "metadata.name"
      - name: bucket-stage
        base:
          apiVersion: minio.crossplane.io/v1
          kind: Bucket
          metadata: {}
          spec:
            forProvider:
              region: eu-central-1
            providerConfigRef:
              name: provider-minio
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s-stage'
      - name: policy
        base:
          apiVersion: minio.crossplane.io/v1
          kind: Policy
          metadata: {}
          spec:
            forProvider: {}
            providerConfigRef:
              name: provider-minio
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.allowBucket"
      - name: policy-stage
        base:
          apiVersion: minio.crossplane.io/v1
          kind: Policy
          metadata: {}
          spec:
            forProvider: {}
            providerConfigRef:
              name: provider-minio
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "metadata.name"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s-stage'
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.allowBucket"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s-stage'
      - name: user
        base:
          apiVersion: minio.crossplane.io/v1
          kind: User
          metadata: {}
          spec:
            forProvider:
              policies: []
            providerConfigRef:
              name: provider-minio
            writeConnectionSecretToRef:
              namespace: workspace
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "metadata.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.policies[0]"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.policies[1]"
          transforms:
          - type: string
            string:
              type: Format
              fmt: '%s-stage'
        connectionDetails:
        - name: access
          type: FromConnectionSecretKey
          fromConnectionSecretKey: AWS_ACCESS_KEY_ID
        - name: AWS_ACCESS_KEY_ID
          type: FromConnectionSecretKey
          fromConnectionSecretKey: AWS_ACCESS_KEY_ID
        - name: secret
          type: FromConnectionSecretKey
          fromConnectionSecretKey: AWS_SECRET_ACCESS_KEY
        - name: AWS_SECRET_ACCESS_KEY
          type: FromConnectionSecretKey
          fromConnectionSecretKey: AWS_SECRET_ACCESS_KEY
        - name: bucketname
          type: FromFieldPath
          fromFieldPath: metadata.name
        - name: AWS_ENDPOINT_URL
          type: FromValue
          value: "https://minio.develop.eoepca.org"
        - name: AWS_REGION
          type: FromValue
          value: "eoepca-demo"
      - name: externalsecret
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata: {}
          spec:
            forProvider:
              manifest:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                metadata:
                  name: rclone
                spec:
                  refreshInterval: 1h
                  secretStoreRef:
                    name: in-cluster-kubernetes
                    kind: ClusterSecretStore
                  target:
                    name: rclone
                    creationPolicy: Owner
                    template:
                      data:
                        remote: "{{ .AWS_ACCESS_KEY_ID }}"
                        remotePath: "/"
                        configData: |
                          [{{ .AWS_ACCESS_KEY_ID }}]
                          type = s3
                          provider = Minio
                          endpoint = https://minio.develop.eoepca.org
                          access_key_id = {{ .AWS_ACCESS_KEY_ID }}
                          secret_access_key = {{ .AWS_SECRET_ACCESS_KEY }}
                  data:
                  - secretKey: AWS_SECRET_ACCESS_KEY
                    remoteRef:
                      key: <replaced>
                      property: AWS_SECRET_ACCESS_KEY
                  - secretKey: AWS_ACCESS_KEY_ID
                    remoteRef:
                      key: <replaced>
                      property: AWS_ACCESS_KEY_ID
            providerConfigRef:
              name: provider-kubernetes
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.manifest.metadata.namespace"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.manifest.spec.data[0].remoteRef.key"
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.manifest.spec.data[1].remoteRef.key"