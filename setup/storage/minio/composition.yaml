apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: storage
spec:
  compositeTypeRef:
    apiVersion: epca.eo/v1beta1
    kind: XStorage
  mode: Pipeline
  pipeline:
    - step: setup-buckets-and-policies
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- $xr := .observed.composite.resource }}
            {{- range $i, $bucket := $xr.spec.buckets }}
            ---
            apiVersion: minio.crossplane.io/v1
            kind: Bucket
            metadata:
              name: {{ $bucket }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: bucket-{{ $i }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                region: ""
              providerConfigRef:
                name: provider-minio
            ---
            apiVersion: minio.crossplane.io/v1
            kind: Policy
            metadata:
              name: {{ $bucket }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: policy-{{ $i }}
                gotemplating.fn.crossplane.io/ready: "True"
            spec:
              forProvider:
                allowBucket: {{ $bucket }}
              providerConfigRef:
                name: provider-minio
            {{- end }}
    - step: setup-user
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: user
            base:
              apiVersion: minio.crossplane.io/v1
              kind: User
              metadata: {}
              spec:
                forProvider:
                  policies: []
                providerConfigRef:
                  name: provider-minio
                writeConnectionSecretToRef:
                  name: placeholder
                  namespace: placeholder
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.namespace"
                toFieldPath: "metadata.name"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.bucketNames"
                toFieldPath: "spec.forProvider.policies"
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.namespace"
                toFieldPath: "spec.writeConnectionSecretToRef.name"
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: 'bucket-%s'
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.namespace"
                toFieldPath: "spec.writeConnectionSecretToRef.namespace"
