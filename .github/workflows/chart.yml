name: Build & Push dependency helm charts

on:
  push:
    tags:
      - "[0-9]+\\.[0-9]+\\.[0-9]+"                 # 1.2.3
      - "[0-9]+\\.[0-9]+\\.[0-9]+-alpha\\.[0-9]+"  # 1.2.3-alpha.1
      - "[0-9]+\\.[0-9]+\\.[0-9]+-beta\\.[0-9]+"   # 1.2.3-beta.1
      - "[0-9]+\\.[0-9]+\\.[0-9]+-rc\\.[0-9]+"     # 1.2.3-rc.1

permissions:
  contents: read
  packages: write

env:
  INPUT_FILE: dependencies/input.yaml
  SCRIPT: dependencies/flux-oci-to-helm-chart.sh

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set TAG from ref (strip leading v)
        id: tag
        run: |
          TAG="${GITHUB_REF_NAME#v}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Install Flux CLI
        run: |
          set -euxo pipefail
          curl -s https://fluxcd.io/install.sh | sudo bash
          flux --version

      - name: Install yq
        run: |
          VERSION=v4.44.3
          curl -sSL "https://github.com/mikefarah/yq/releases/download/${VERSION}/yq_linux_amd64" -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Helm login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Make script executable
        run: chmod +x "${{ env.SCRIPT }}"

      - name: Build & push all dependencies
        shell: bash
        run: |
          set -euo pipefail
          FILE="${INPUT_FILE}"
          [[ -f "$FILE" ]] || { echo "Missing $FILE"; exit 1; }

          TAG="${{ steps.tag.outputs.tag }}"
          OWNER_LC="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          CHART_REPO="oci://ghcr.io/${OWNER_LC}/workspace"

          total=$(yq '.repos | length' "$FILE")
          echo "Using chart version tag: $TAG (processing $total repos)"

          for ((i=0; i<total; i++)); do
            NAME=$(yq -r ".repos[$i].name" "$FILE")
            VARS=$(yq -r ".repos[$i].variables // [] | join(\",\")" "$FILE")

            if [[ "$NAME" == oci://* ]]; then
              OCI_REF="$NAME"
            else
              OCI_REF="oci://$NAME"
            fi

            TAG_PART="${NAME#*:}"
            BASE="${TAG_PART%-*}"
            [[ -n "$BASE" && "$BASE" != "$NAME" ]] || { echo "Bad repo format: $NAME"; exit 1; }

            VAR_ARGS=()
            [[ -n "$VARS" ]] && VAR_ARGS+=( --variables "$VARS" )

            "${SCRIPT}" "$OCI_REF" "$BASE" \
              --tag "$TAG" \
              --repo "$CHART_REPO" \
              --push \
              "${VAR_ARGS[@]}"
          done

      - name: Build & push workspace-pipeline chart (from directory)
        run: |
          set -euo pipefail
          OWNER_LC="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          TAG="${{ steps.tag.outputs.tag }}"
          REPO="oci://ghcr.io/${OWNER_LC}/workspace"

          cd pipeline

          yq -i ".version=\"${TAG}\" | .appVersion=\"${TAG}\"" Chart.yaml

          mkdir -p dist
          helm package . --destination dist

          FILE="$(ls dist/workspace-pipeline-*.tgz)"
          echo "Pushing $FILE to $REPO"
          helm push "$FILE" "$REPO"

          ls -la dist || true

      - name: Upload packaged charts (workspace-pipeline)
        uses: actions/upload-artifact@v4
        with:
          name: workspace-pipeline-chart
          path: workspace-pipeline/dist/
